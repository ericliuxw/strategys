# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MsgPacket', [dirname(__file__)])
        except ImportError:
            import _MsgPacket
            return _MsgPacket
        if fp is not None:
            try:
                _mod = imp.load_module('_MsgPacket', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _MsgPacket = swig_import_helper()
    del swig_import_helper
else:
    import _MsgPacket
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


DEFAULT_MAP_STR_KEY_LEN = _MsgPacket.DEFAULT_MAP_STR_KEY_LEN
class MsgPacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsgPacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MsgPacket, name)
    __repr__ = _swig_repr
    all = _MsgPacket.MsgPacket_all
    normal = _MsgPacket.MsgPacket_normal
    binary = _MsgPacket.MsgPacket_binary
    def __init__(self): 
        this = _MsgPacket.new_MsgPacket()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MsgPacket.delete_MsgPacket
    __del__ = lambda self : None;
    def SetMsgDefine(self, *args): return _MsgPacket.MsgPacket_SetMsgDefine(self, *args)
    def GetMsgDefine(self): return _MsgPacket.MsgPacket_GetMsgDefine(self)
    def get_src(self): return _MsgPacket.MsgPacket_get_src(self)
    def get_dst(self): return _MsgPacket.MsgPacket_get_dst(self)
    def clear(self): return _MsgPacket.MsgPacket_clear(self)
    def parse(self, *args): return _MsgPacket.MsgPacket_parse(self, *args)
    def get_long(self, *args): return _MsgPacket.MsgPacket_get_long(self, *args)
    def get_double(self, *args): return _MsgPacket.MsgPacket_get_double(self, *args)
    def get_char(self, *args): return _MsgPacket.MsgPacket_get_char(self, *args)
    def get_str(self, *args): return _MsgPacket.MsgPacket_get_str(self, *args)
    def get_bin_data(self, *args): return _MsgPacket.MsgPacket_get_bin_data(self, *args)
    def get_bin_data_length(self, *args): return _MsgPacket.MsgPacket_get_bin_data_length(self, *args)
    def set_long(self, *args): return _MsgPacket.MsgPacket_set_long(self, *args)
    def set_double(self, *args): return _MsgPacket.MsgPacket_set_double(self, *args)
    def set_char(self, *args): return _MsgPacket.MsgPacket_set_char(self, *args)
    def set_value(self, *args): return _MsgPacket.MsgPacket_set_value(self, *args)
    def writereg(self, *args): return _MsgPacket.MsgPacket_writereg(self, *args)
    def writereq(self, *args): return _MsgPacket.MsgPacket_writereq(self, *args)
    def writeans(self, *args): return _MsgPacket.MsgPacket_writeans(self, *args)
    def writesub(self, *args): return _MsgPacket.MsgPacket_writesub(self, *args)
    def writepub(self, *args): return _MsgPacket.MsgPacket_writepub(self, *args)
    def contains(self, *args): return _MsgPacket.MsgPacket_contains(self, *args)
    __swig_setmethods__["name"] = _MsgPacket.MsgPacket_name_set
    __swig_getmethods__["name"] = _MsgPacket.MsgPacket_name_get
    if _newclass:name = _swig_property(_MsgPacket.MsgPacket_name_get, _MsgPacket.MsgPacket_name_set)
    __swig_setmethods__["type"] = _MsgPacket.MsgPacket_type_set
    __swig_getmethods__["type"] = _MsgPacket.MsgPacket_type_get
    if _newclass:type = _swig_property(_MsgPacket.MsgPacket_type_get, _MsgPacket.MsgPacket_type_set)
    __swig_setmethods__["no"] = _MsgPacket.MsgPacket_no_set
    __swig_getmethods__["no"] = _MsgPacket.MsgPacket_no_get
    if _newclass:no = _swig_property(_MsgPacket.MsgPacket_no_get, _MsgPacket.MsgPacket_no_set)
    __swig_setmethods__["sysno"] = _MsgPacket.MsgPacket_sysno_set
    __swig_getmethods__["sysno"] = _MsgPacket.MsgPacket_sysno_get
    if _newclass:sysno = _swig_property(_MsgPacket.MsgPacket_sysno_get, _MsgPacket.MsgPacket_sysno_set)
    __swig_setmethods__["src"] = _MsgPacket.MsgPacket_src_set
    __swig_getmethods__["src"] = _MsgPacket.MsgPacket_src_get
    if _newclass:src = _swig_property(_MsgPacket.MsgPacket_src_get, _MsgPacket.MsgPacket_src_set)
    __swig_setmethods__["dst"] = _MsgPacket.MsgPacket_dst_set
    __swig_getmethods__["dst"] = _MsgPacket.MsgPacket_dst_get
    if _newclass:dst = _swig_property(_MsgPacket.MsgPacket_dst_get, _MsgPacket.MsgPacket_dst_set)
    __swig_setmethods__["subject"] = _MsgPacket.MsgPacket_subject_set
    __swig_getmethods__["subject"] = _MsgPacket.MsgPacket_subject_get
    if _newclass:subject = _swig_property(_MsgPacket.MsgPacket_subject_get, _MsgPacket.MsgPacket_subject_set)
    __swig_setmethods__["TYPE_NAME"] = _MsgPacket.MsgPacket_TYPE_NAME_set
    __swig_getmethods__["TYPE_NAME"] = _MsgPacket.MsgPacket_TYPE_NAME_get
    if _newclass:TYPE_NAME = _swig_property(_MsgPacket.MsgPacket_TYPE_NAME_get, _MsgPacket.MsgPacket_TYPE_NAME_set)
    __swig_setmethods__["TYPE_REQ"] = _MsgPacket.MsgPacket_TYPE_REQ_set
    __swig_getmethods__["TYPE_REQ"] = _MsgPacket.MsgPacket_TYPE_REQ_get
    if _newclass:TYPE_REQ = _swig_property(_MsgPacket.MsgPacket_TYPE_REQ_get, _MsgPacket.MsgPacket_TYPE_REQ_set)
    __swig_setmethods__["TYPE_ANS"] = _MsgPacket.MsgPacket_TYPE_ANS_set
    __swig_getmethods__["TYPE_ANS"] = _MsgPacket.MsgPacket_TYPE_ANS_get
    if _newclass:TYPE_ANS = _swig_property(_MsgPacket.MsgPacket_TYPE_ANS_get, _MsgPacket.MsgPacket_TYPE_ANS_set)
    __swig_setmethods__["TYPE_SUB"] = _MsgPacket.MsgPacket_TYPE_SUB_set
    __swig_getmethods__["TYPE_SUB"] = _MsgPacket.MsgPacket_TYPE_SUB_get
    if _newclass:TYPE_SUB = _swig_property(_MsgPacket.MsgPacket_TYPE_SUB_get, _MsgPacket.MsgPacket_TYPE_SUB_set)
    __swig_setmethods__["TYPE_PUB"] = _MsgPacket.MsgPacket_TYPE_PUB_set
    __swig_getmethods__["TYPE_PUB"] = _MsgPacket.MsgPacket_TYPE_PUB_get
    if _newclass:TYPE_PUB = _swig_property(_MsgPacket.MsgPacket_TYPE_PUB_get, _MsgPacket.MsgPacket_TYPE_PUB_set)
    __swig_setmethods__["_NULL"] = _MsgPacket.MsgPacket__NULL_set
    __swig_getmethods__["_NULL"] = _MsgPacket.MsgPacket__NULL_get
    if _newclass:_NULL = _swig_property(_MsgPacket.MsgPacket__NULL_get, _MsgPacket.MsgPacket__NULL_set)
    __swig_setmethods__["CMD_CONN"] = _MsgPacket.MsgPacket_CMD_CONN_set
    __swig_getmethods__["CMD_CONN"] = _MsgPacket.MsgPacket_CMD_CONN_get
    if _newclass:CMD_CONN = _swig_property(_MsgPacket.MsgPacket_CMD_CONN_get, _MsgPacket.MsgPacket_CMD_CONN_set)
    __swig_setmethods__["REQ_CHINAFUT_TRADE"] = _MsgPacket.MsgPacket_REQ_CHINAFUT_TRADE_set
    __swig_getmethods__["REQ_CHINAFUT_TRADE"] = _MsgPacket.MsgPacket_REQ_CHINAFUT_TRADE_get
    if _newclass:REQ_CHINAFUT_TRADE = _swig_property(_MsgPacket.MsgPacket_REQ_CHINAFUT_TRADE_get, _MsgPacket.MsgPacket_REQ_CHINAFUT_TRADE_set)
    __swig_setmethods__["RESP_CHINAFUT_TRADE"] = _MsgPacket.MsgPacket_RESP_CHINAFUT_TRADE_set
    __swig_getmethods__["RESP_CHINAFUT_TRADE"] = _MsgPacket.MsgPacket_RESP_CHINAFUT_TRADE_get
    if _newclass:RESP_CHINAFUT_TRADE = _swig_property(_MsgPacket.MsgPacket_RESP_CHINAFUT_TRADE_get, _MsgPacket.MsgPacket_RESP_CHINAFUT_TRADE_set)
    __swig_setmethods__["RESP_CHINAFUT_QUOTE"] = _MsgPacket.MsgPacket_RESP_CHINAFUT_QUOTE_set
    __swig_getmethods__["RESP_CHINAFUT_QUOTE"] = _MsgPacket.MsgPacket_RESP_CHINAFUT_QUOTE_get
    if _newclass:RESP_CHINAFUT_QUOTE = _swig_property(_MsgPacket.MsgPacket_RESP_CHINAFUT_QUOTE_get, _MsgPacket.MsgPacket_RESP_CHINAFUT_QUOTE_set)
    __swig_setmethods__["REQ_CHINAFUT_SIGNAL"] = _MsgPacket.MsgPacket_REQ_CHINAFUT_SIGNAL_set
    __swig_getmethods__["REQ_CHINAFUT_SIGNAL"] = _MsgPacket.MsgPacket_REQ_CHINAFUT_SIGNAL_get
    if _newclass:REQ_CHINAFUT_SIGNAL = _swig_property(_MsgPacket.MsgPacket_REQ_CHINAFUT_SIGNAL_get, _MsgPacket.MsgPacket_REQ_CHINAFUT_SIGNAL_set)
    __swig_setmethods__["MSG_CONN"] = _MsgPacket.MsgPacket_MSG_CONN_set
    __swig_getmethods__["MSG_CONN"] = _MsgPacket.MsgPacket_MSG_CONN_get
    if _newclass:MSG_CONN = _swig_property(_MsgPacket.MsgPacket_MSG_CONN_get, _MsgPacket.MsgPacket_MSG_CONN_set)
    __swig_setmethods__["RESP_ORDER_ACCEPT"] = _MsgPacket.MsgPacket_RESP_ORDER_ACCEPT_set
    __swig_getmethods__["RESP_ORDER_ACCEPT"] = _MsgPacket.MsgPacket_RESP_ORDER_ACCEPT_get
    if _newclass:RESP_ORDER_ACCEPT = _swig_property(_MsgPacket.MsgPacket_RESP_ORDER_ACCEPT_get, _MsgPacket.MsgPacket_RESP_ORDER_ACCEPT_set)
    __swig_setmethods__["RESP_ORDER_REJECT"] = _MsgPacket.MsgPacket_RESP_ORDER_REJECT_set
    __swig_getmethods__["RESP_ORDER_REJECT"] = _MsgPacket.MsgPacket_RESP_ORDER_REJECT_get
    if _newclass:RESP_ORDER_REJECT = _swig_property(_MsgPacket.MsgPacket_RESP_ORDER_REJECT_get, _MsgPacket.MsgPacket_RESP_ORDER_REJECT_set)
    __swig_setmethods__["RESP_CXL_ACCEPT"] = _MsgPacket.MsgPacket_RESP_CXL_ACCEPT_set
    __swig_getmethods__["RESP_CXL_ACCEPT"] = _MsgPacket.MsgPacket_RESP_CXL_ACCEPT_get
    if _newclass:RESP_CXL_ACCEPT = _swig_property(_MsgPacket.MsgPacket_RESP_CXL_ACCEPT_get, _MsgPacket.MsgPacket_RESP_CXL_ACCEPT_set)
    __swig_setmethods__["RESP_CXL_REJECT"] = _MsgPacket.MsgPacket_RESP_CXL_REJECT_set
    __swig_getmethods__["RESP_CXL_REJECT"] = _MsgPacket.MsgPacket_RESP_CXL_REJECT_get
    if _newclass:RESP_CXL_REJECT = _swig_property(_MsgPacket.MsgPacket_RESP_CXL_REJECT_get, _MsgPacket.MsgPacket_RESP_CXL_REJECT_set)
    __swig_setmethods__["RESP_ORDER_CXLED"] = _MsgPacket.MsgPacket_RESP_ORDER_CXLED_set
    __swig_getmethods__["RESP_ORDER_CXLED"] = _MsgPacket.MsgPacket_RESP_ORDER_CXLED_get
    if _newclass:RESP_ORDER_CXLED = _swig_property(_MsgPacket.MsgPacket_RESP_ORDER_CXLED_get, _MsgPacket.MsgPacket_RESP_ORDER_CXLED_set)
    __swig_setmethods__["RESP_ORDER_EXE"] = _MsgPacket.MsgPacket_RESP_ORDER_EXE_set
    __swig_getmethods__["RESP_ORDER_EXE"] = _MsgPacket.MsgPacket_RESP_ORDER_EXE_get
    if _newclass:RESP_ORDER_EXE = _swig_property(_MsgPacket.MsgPacket_RESP_ORDER_EXE_get, _MsgPacket.MsgPacket_RESP_ORDER_EXE_set)
    __swig_setmethods__["REQ_ORDER_ENTER"] = _MsgPacket.MsgPacket_REQ_ORDER_ENTER_set
    __swig_getmethods__["REQ_ORDER_ENTER"] = _MsgPacket.MsgPacket_REQ_ORDER_ENTER_get
    if _newclass:REQ_ORDER_ENTER = _swig_property(_MsgPacket.MsgPacket_REQ_ORDER_ENTER_get, _MsgPacket.MsgPacket_REQ_ORDER_ENTER_set)
    __swig_setmethods__["REQ_ORDER_CXL"] = _MsgPacket.MsgPacket_REQ_ORDER_CXL_set
    __swig_getmethods__["REQ_ORDER_CXL"] = _MsgPacket.MsgPacket_REQ_ORDER_CXL_get
    if _newclass:REQ_ORDER_CXL = _swig_property(_MsgPacket.MsgPacket_REQ_ORDER_CXL_get, _MsgPacket.MsgPacket_REQ_ORDER_CXL_set)
MsgPacket_swigregister = _MsgPacket.MsgPacket_swigregister
MsgPacket_swigregister(MsgPacket)

# This file is compatible with both classic and new-style classes.


